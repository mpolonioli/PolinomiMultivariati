; Load this file and project 
; Call the function: (test-all) for all tests or (test-<test-name>) for a specific test

(defun test-all () 
  (test-is-varpower)
  (test-is-monomial)
  (test-is-polynomial)
  (test-coefficients)
  (test-variables)
  (test-monomials)
  (test-max-min-degree)
  (test-polyplus)
  (test-polyminus)
  (test-polytimes)
  (test-as-monomial)
  (test-as-polynomial)
  (test-polyval)
)



(defun test-is-varpower ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-varpower '(v 1 x)) T)
          '(is-varpower '(v 1 x)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-varpower '(v x 1)) NIL)
          '(is-varpower '(v x 1)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-varpower '(v -1 x)) NIL)
          '(is varpower '(v -1 x)))
)



(defun test-is-monomial ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-monomial '(m 4 1 ((v 1 x)))) T)
          '(is-monomial '(m 4 1 ((v 1 x)))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-monomial '(m 1 1 ((v 1 x)))) T)
          '(is-monomial '(m 1 1 ((v 1 x)))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-monomial '(m 1 0 ())) T)
          '(is-monomial '(m 1 0 (()))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-monomial '(poly(m 1 0 ()))) NIL)
          '(is-monomial '(poly(m 1 0 ()))))
)


(defun test-is-polynomial ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-polynomial '(poly ((m 4 1 ((v 1 x)))))) T)
          '(is-polynomial '(poly ((m 4 1 ((v 1 x)))))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-polynomial '(poly ((m 1 0 ())))) T)
          '(is-polynomial '(poly ((m 1 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (is-polynomial '(poly ((m 4 2 ((v 1 x) (v 1 y)))
                                                                  (m 1 2 ((v 2 x)))
                                                                  (m 5 2 ((v 2 y))))))
                                           T)
          '(is-polynomial '(poly ((m 4 2 ((v 1 x) (v 1 y)))
                                  (m 1 2 ((v 2 x)))
                                  (m 5 2 ((v 2 y)))))))
)


(defun test-coefficients ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (coefficients '(poly ((m 42 0 ()))))
                                              '(42))
          '(coefficients '(poly ((m 42 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (coefficients '(poly ((m 3 1 ((v 1 x)))
                                                                    (m 42 0 ()))))
                                              '(42 3))
          '(coefficients '(poly ((m 3 1 ((v 1 x)))
                                 (m 42 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (coefficients '(poly ((m 3 2 ((v 1 x)))
                                                                    (m -4 1 ((v 1 x)))
                                                                    (m 1 0 ()))))
                                              '(1 -1))
          '(coefficients '(poly ((m 3 2 ((v 1 x)))
                                 (m -4 1 ((v 1 x)))
                                 (m 1 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (coefficients '(poly ((m -4 2 ((v 2 x)))
                                                                    (m 3 1 ((v 1 x)))
                                                                    (m 1 0 ()))))
                                              '(1 3 -4))
          '(coefficients '(poly ((m -4 2 ((v 2 x)))
                                 (m 3 1 ((v 1 x)))
                                 (m 1 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (coefficients '(poly ((m 1 8 ((v 2 x) (v 5 y)
                                                                            (v 1 z)))
                                                                    (m 1 5 ((v 1 x) (v 1 y)
                                                                            (v 3 z)))
                                                                    (m 1 3 ((v 1 x) (v 1 y)
                                                                            (v 1 z))))))
                                              '(1 1 1))
          '(coefficients '(poly ((m 1 8 ((v 2 x) (v 5 y) (v 1 z)))
                                 (m 1 5 ((v 1 x) (v 1 y) (v 3 z)))
                                 (m 1 3 ((v 1 x) (v 1 y) (v 1 z)))))))
)


(defun test-variables ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (variables '(poly ((m 42 0 ())))) '())
          '(variables '(poly (m 42 0 ()))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (variables '(poly ((m 3 1 ((v 1 x)))
                                                                 (m 42 0 ()))))
                                              '(x))
          '(variables '(poly ((m 3 1 ((v 1 x)))
                              (m 42 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (variables '(poly ((m 3 1 ((v 1 x)))
                                                                 (m -4 1 ((v 1 x)))
                                                                 (m 1 0 ()))))
                                              '(x))
          '(variables '(poly ((m 3 1 ((v 1 x)))
                              (m -4 1 ((v 1 x)))
                              (m 1 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (variables '(poly ((m -4 2 ((v 2 x)))
                                                                 (m 3 1 ((v 1 x)))
                                                                 (m 1 0 ()))))
                                              '(x))
          '(variables '(poly ((m -4 2 ((v 2 x)))
                              (m 3 1 ((v 1 x)))
                              (m 1 0 ())))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (variables '(poly ((m 1 8 ((v 2 x) (v 5 y) 
                                                                         (v 1 z)))
                                                                 (m 1 5 ((v 1 x) (v 1 y)
                                                                         (v 3 z)))
                                                                 (m 1 3 ((v 1 x) (v 1 Y)
                                                                         (v 1 z))))))
                                              '(x y z))
          '(variables '(poly ((m 1 8 ((v 2 x) (v 5 y) (v 1 z)))
                              (m 1 5 ((v 1 x) (v 1 y) (v 3 z)))
                              (m 1 3 ((v 1 x) (v 1 Y) (v 1 z)))))))
  )


(defun test-monomials ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (monomials '(poly ((m 1 1 ((v 1 b)))
                                                                 (m 1 1 ((v 1 a))))))
                                              '((m 1 1 ((v 1 a)))
                                                (m 1 1 ((v 1 b)))))
          '(monomials '(poly ((m 1 1 ((v 1 b)))
                              (m 1 1 ((v 1 a)))))))
  )


(defun test-max-min-degree ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (maxdegree '(+ (* y (expt x 3))
                                                          (* y (expt x 5))
                                                          (* (expt x 8))
                                                          (* (expt y 2))
                                                          (* z (expt x 5))
                                                          (* z y)))
                                           8)
          '(maxdegree '(+ (* y (expt x 3))
                          (* y (expt x 5))
                          (* (expt x 8))
                          (* (expt y 2))
                          (* z (expt x 5))
                          (* z y))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (maxdegree '(+ (* (expt y 128)) 1)) 128)
          '(maxdegree '(+ (* (expt y 128)) 1)))

  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (mindegree '(+ (* y (expt x 3))
                                                          (* y (expt x 5))
                                                          (* (expt x 8))
                                                          (* (expt y 2))
                                                          (* z (expt x 5))
                                                          (* z y)))
                                           2)
          '(mindegree '(+ (* y (expt x 3))
                          (* y (expt x 5))
                          (* (expt x 8))
                          (* (expt y 2))
                          (* z (expt x 5))
                          (* z y))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (mindegree '(+ (* (expt y 128)) 1)) 0)
          '(mindegree '(+ (expt y 128) 1)))
)


(defun test-polyplus ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyplus '(* 3 x) '(m 4 1 ((v 1 x))))
                                              '(poly ((m 7 1 ((v 1 x))))))
          '(polyplus '(* 3 x) '(m 4 1 ((v 1 x)))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyplus '(* 3 x) '(* 3 y)) '(poly ((m 3 1
                                                                                      ((v 1 x)))
                                                                                   (m 3 1 
                                                                                      ((v 1 y))))))
          '(polyplus '(* 3 x) '(* 3 y)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyplus '(poly ((m 3 1 ((v 1 x)))
                                                                (m 4 1 ((v 1 y)))))
                                                        '(* 3 y))
                                           '(poly ((m 3 1 ((v 1 x)))
                                                   (m 7 1 ((v 1 y))))))
          '(polyplus '(poly ((m 3 1 ((v 1 x)))
                              (m 4 1 ((v 1 y)))))
                     '(* 3 y)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyplus '(+ 3) '(+ 39)) '(poly ((m 42 0 ()))))
          '(polyplus '(+ 3) '(+ 39)))
)



(defun test-polyminus ()

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyminus '(* 3 x) '(* 4 x)) '(poly ((m -1 1 ((v 1 x))))))
          '(polyminus '(* 3 x) '(* 4 x)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyminus '(poly ((m 3 1 ((v 1 x))))) '(* 4 x))
                                              '(poly ((m -1 1 ((v 1 x))))))
          '(polyminus '(poly ((m 3 1 ((v 1 x))))) '(* 4 x)))  
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polyminus '(* 3 x) '(poly ((m 4 1 ((v 1 x)))))) 
                                              '(poly ((m -1 1 ((v 1 x))))))
          '(polyminus '(* 3 x) '(poly ((m 4 1 ((v 1 x)))))))
)



(defun test-polytimes () 

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(* (expt x 3)) 'x) '(poly ((m 1 4 ((v 4 x))))))
          '(polytimes '(* (expt x 3)) 'x))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(* (expt x 3)) '(poly ((m 1 8 ((v 8 x)))))) 
                                              '(poly ((m 1 11 ((v 11 x))))))
          '(polytimes '(* (expt x 3)) '(poly ((m 1 8 ((v 8 x)))))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(poly ((m 1 1 ((v 1 y))) (m 1 3 ((v 3 x))))) 
                                                         '(* (expt x 5)))
                                              '(poly ((m 1 6 ((v 5 x) (v 1 y)))
                                                      (m 1 8 ((v 8 x))))))
          '(polytimes '(poly ((m 1 1 ((v 1 y))) (m 1 3 ((v 3 x))))) 
                      '(* (expt x 5))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(+ (* (expt x 3)) y) '(+ (* (expt x 5)) y))
                                              '(poly ((m 1 2 ((v 2 y))) 
                                                      (m 1 4 ((v 3 x) (v 1 y)))
                                                      (m 1 6 ((v 5 x) (v 1 y)))
                                                      (m 1 8 ((v 8 x))))))
          '(polytimes '(+ (* (expt x 3)) y) '(+ (* (expt x 5)) y)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(+ (* (expt x 3)) y z) '(+ (* (expt x 5)) y))
                                              (as-polynomial '(+ (* y (expt x 3))
                                                                  (* y (expt x 5))
                                                                  (* (expt x 8))
                                                                  (* (expt y 2))
                                                                  (* z (expt x 5))
                                                                  (* z y))))
          '(polytimes '(+ (* (expt x 3)) y z) '(+ (* (expt x 5)) y)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(poly ()) '(poly ((m 1 3 ((v 3 x))))))
                                              '(poly ()))
          '(polytimes '(poly ()) '(poly ((m 1 3 ((v 3 x)))))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (polytimes '(* (expt x 3)) '(+ 0)) '(poly ()))
          '(polytimes '(* (expt x 3)) '(+ 0)))
)



(defun test-as-monomial () 

  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '42) '(m 42 0 ()))
          '(as-monomial '42))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial 'x) '(m 1 1 ((v 1 x))))
          '(as-monomial 'x))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* (expt x 2))) '(m 1 2 ((v 2 x))))
          '(as-monomial '(* (expt x 2))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* (expt x 2) (expt y 3))) 
                                              '(m 1 5 ((v 2 x) (v 3 y))))
          '(as-monomial '(* (expt x 2) (expt y 3))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* 69 (expt x 2) (expt y 3)))
                                              '(m 69 5 ((v 2 x) (v 3 y))))
          '(as-monomial '(* 69 (expt x 2) (expt y 3))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* 69 (expt y 3) (expt x 2) (expt a 3)))
                                              '(m 69 8 ((v 3 a) (v 2 x) (v 3 y))))
          '(as-monomial '(* 69 (expt y 3) (expt x 2) (expt a 3))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* (expt y 3) (expt a 3) (expt ab 3) 
                                                               (expt a 6)))
                                              '(m 1 15 ((v 9 a) (v 3 ab) (v 3 y))))
          '(as-monomial '(* (expt y 3) (expt a 3) (expt ab 3) 
                            (expt a 6))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-monomial '(* a b (expt a 2) (expt b 2)))
                                              '(m 1 6 ((v 3 a) (v 3 b))))
          '(as-monomial '(* a b (expt a 2) (expt b 2))))
)



(defun test-as-polynomial ()
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '42) '(poly ((m 42 0 ()))))
          '(as-polynomial '42)) 
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ 21 21)) '(poly ((m 42 0 ()))))
          '(as-polynomial '(+ 21 21)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ 21 x 21 x x)) 
                                              '(poly ((m 42 0 ())
                                                      (m 3 1 ((v 1 x))))))
          '(as-polynomial '(+ 21 x 21 x x)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* 3 x) (* -4 x) 1))
                                              '(poly ((m 1 0 ())
                                                      (m -1 1 ((v 1 x))))))
          '(as-polynomial '(+ (* 3 x) (* -4 x) 1)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* 3 x) (* -4 (expt x 2)) 1))
                                              '(poly ((m 1 0 ())
                                                      (m 3 1 ((v 1 x)))
                                                      (m -4 2 ((v 2 x))))))
          '(as-polynomial '(+ (* 3 x) (* -4 (expt x 2)) 1)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ 
                                                               (* x (expt y 2))
                                                               (* (expt x 2) y)
                                                               (* (expt x 3))))
                                              '(poly ((m 1 3 ((v 1 x) (v 2 y)))
                                                      (m 1 3 ((v 2 x) (v 1 y)))
                                                      (m 1 3 ((v 3 x))))))
          '(as-polynomial '(+ (* x (expt y 2)) (* (expt x 2) y)
                              (* (expt x 3)))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* a c) (* (expt a 2)) (* a b) a))
                                              '(poly ((m 1 1 ((v 1 a))) 
                                                      (m 1 2 ((v 1 a) (v 1 b)))
                                                      (m 1 2 ((v 1 a) (v 1 c)))
                                                      (m 1 2 ((v 2 a))))))
          '(as-polynomial '(+ (* a c) (* (expt a 2)) (* a b) a)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* 3 x) (* -3 x)))
                                              '(poly ()))
          '(as-polynomial '(+ (* 3 x) (* -3 x))))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* 3 x) (* -1 y) (* -3 x) y))
                                              '(poly ()))
          '(as-polynomial '(+ (* 3 x) (* -1 y) (* -3 x) y)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (equal (as-polynomial '(+ (* 3 x) (* -1 y) -0 (* -3 x) y))
                                              '(poly ()))
          '(as-polynomial '(+ (* 3 x) (* -1 y) -0 (* -3 x) y)))
)



(defun test-polyval ()
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (polyval '(* (expt y 3)) '(2)) 8)
          '(polyval '(* (expt y 3)) '(2)))
  (format t "~:[FAIL~;pass~] ... ~a~%" (eq (polyval '(+ (* (expt x 2)) (* -1 (expt y 2))) '(12 12)) 0)
          '(polyval '(+ (* (expt x 2)) (* -1 (expt y 2))) '(12 12)))

)
